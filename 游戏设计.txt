main.py         ---- 主循环，该文件会调用其他文件来展示不同界面
    menu.py         ---- 菜单界面
        board.py        ---- 棋盘类
        hud.py          ---- 记分板类
    game.py         ---- 游戏界面
    rules.py        ---- 游戏规则界面
    setLevel.py    ---- 设置游戏等级界面
    matching.py     ---- 匹配界面

settings.py     ---- 保存游戏默认的常量


menu:
    发起新游戏
    匹配
    游戏规则
    退出

每次点击，发送数据
Send({
"action": "place", 
"x":widthPos, 
"y":heightPos, 
"is_horizontal": is_horizontal, 
"gameID": self.gameID, 
"num": self.num,
"w": None
})

如果 w 为坐标，表示当前点击后客户端判断得到了一个格子，

玩家点击，发送数据给服务器
服务器响应，同步数据给两个玩家
两个玩家客户端接收到数据，判断得失分，发送给服务器

判断点击的边的 两侧方块 即可

Send({
    "action": "getPoint"
    "x": widthPos,
    "y": heightPos,
    "gameID": self.gameID
    "order": self.order
})

服务器维护两个得分队列
服务端拿到一个客户端发来的结果后，和另一个客户端的得分队列比较
如果找到，从队列中删除，服务端记分，同步给两个客户端
如果没找到，插入队列，等待对方同步

---

服务端维护一个等待中房间 集合，存储的内容是 gameID


维护一个游戏set，存储的内容是 gameID : game 逻辑类

---

进入匹配后，读取 等待中房间 集合，每页显示四个 div
每个 div 绘制房间名称和等级

---

系统记录每个玩家的得分，当总分达到棋盘总分，判断哪个玩家胜利

发送胜负消息，玩家得到消息后转入 finish 页面

finish 页面可以 按按钮 返回主菜单